schema {
  query: QueryRoot
  mutation: MutationRoot
}

enum CommandExecutionResult {
  OK
  ERROR
}

type DataTier {
  id: ID!
  slug: String!
  name: String!
  realm: String!
  environments(
    after: String
    before: String
    first: Int
    last: Int
  ): EnvironmentConnection!
}

type DataTierConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DataTierEdge!]!

  # A list of nodes.
  nodes: [DataTier!]!
}

input DataTierCreateInput {
  slug: Slug!
  realm: Slug!
  displayName: String!
}

# An edge in a connection.
type DataTierEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: DataTier!
}

input DataTierUpdateInput {
  slug: Slug!
  realm: Slug!
  displayName: String
}

# Implement the DateTime<Utc> scalar
#
# The input/output is a string in RFC3339 format.
scalar DateTime

type Environment {
  id: ID!
  slug: String!
  dataTier: DataTier
  realm: Realm
  revisions(
    after: String
    before: String
    first: Int
    last: Int
  ): EnvironmentRevisionConnection!
}

type EnvironmentConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EnvironmentEdge!]!

  # A list of nodes.
  nodes: [Environment!]!
}

input EnvironmentCreateInput {
  slug: Slug!
  realm: Slug!
  dataTier: Slug!
}

# An edge in a connection.
type EnvironmentEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Environment!
}

type EnvironmentRevision {
  id: ID!
  revision: Int!
  createdAt: DateTime!
  kubernetesManifest: KubernetesManifest
}

type EnvironmentRevisionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EnvironmentRevisionEdge!]!

  # A list of nodes.
  nodes: [EnvironmentRevision!]!
}

# An edge in a connection.
type EnvironmentRevisionEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: EnvironmentRevision!
}

input EnvironmentUpdateInput {
  slug: Slug!
  realm: Slug!
  dataTier: Slug
}

enum GitRepositoryProvider {
  GIT_HUB
}

type KubernetesManifest {
  id: ID!
  documentBase64: String!
}

type MutationRoot {
  environmentCreate(input: EnvironmentCreateInput!): CommandExecutionResult!
  environmentUpdate(input: EnvironmentUpdateInput!): CommandExecutionResult!
  realmCreate(input: RealmCreateInput!): CommandExecutionResult!
  realmUpdate(input: RealmUpdateInput!): CommandExecutionResult!
  dataTierCreate(input: DataTierCreateInput!): CommandExecutionResult!
  dataTierUpdate(input: DataTierUpdateInput!): CommandExecutionResult!
  registerDockerImagePush(
    input: RegisterDockerImagePushInput!
  ): CommandExecutionResult!
}

# Information about pagination in a connection
type PageInfo {
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type QueryRoot {
  tenant(slug: String!): Tenant
  environment(slug: String!): Environment
  realm(slug: String!): Realm
  dataTier(slug: String!, realm: String!): DataTier
}

type Realm {
  id: ID!
  slug: String!
  dataTiers(
    after: String
    before: String
    first: Int
    last: Int
  ): DataTierConnection!
  environments(
    after: String
    before: String
    first: Int
    last: Int
  ): EnvironmentConnection!
}

type RealmConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RealmEdge!]!

  # A list of nodes.
  nodes: [Realm!]!
}

input RealmCreateInput {
  slug: Slug!
  displayName: String!
}

# An edge in a connection.
type RealmEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Realm!
}

input RealmUpdateInput {
  slug: Slug!
  displayName: String
}

input RegisterDockerImagePushInput {
  dockerImageRef: String!
  gitRepositoryProvider: GitRepositoryProvider!
  gitRepositoryServerUrl: String!
  gitRepositoryFullName: String!
  commitHash: String!
}

scalar Slug

type Tenant {
  id: ID!
  slug: String!
  name: String!
  dataTiers(
    after: String
    before: String
    first: Int
    last: Int
  ): DataTierConnection!
  realms(after: String, before: String, first: Int, last: Int): RealmConnection!
  environments(
    after: String
    before: String
    first: Int
    last: Int
  ): EnvironmentConnection!
}
